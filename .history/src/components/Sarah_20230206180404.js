import React, { useState, createRef, useEffect } from "react";
import styled from "styled-components";
import { useInView } from "react-intersection-observer";

const Sarah = (props) => {
  const [inViewRef, inView] = useInView({
    triggerOnce: true,
  });
  const pathRef = createRef();
  const [pathLength, setPathLength] = useState();

  useEffect(() => {
    if (pathRef.current) {
      setPathLength(pathRef.current.getTotalLength());
    }
  }, [pathRef]);

  return (
    <Wrapper ref={inViewRef} pathLength={pathLength}>
      <svg
        className={inView ? "animated visible" : "animated"}
        viewBox="0 0 127.237 53.457"
        {...props}
      >
        {/* <path
          ref={pathRef}
          d="M5.27 7.113l-1.7-4.158S3.475.593 4.23.215c.756-.378 3.78.567 4.158 3.118.378 2.552-.472 6.237-2.551 8.316-2.08 2.079-6.142.189-5.67-.567.472-.756 3.024-5.292 2.079-6.331C1.302 3.71.263 12.877.64 13.255c.378.378 5.009 1.323 6.426.284 1.417-1.04 0-1.323 1.323-1.323s3.969-1.89 4.158-5.386c.189-3.497 1.606.283 1.228 1.606-.378 1.323-.756 3.024.473 4.063 1.228 1.04 3.023-1.228 3.118-2.55.094-1.324 3.213-4.348 2.362-3.12-.85 1.23-2.646 3.12-2.362 4.725.283 1.607 2.646 1.134 2.835.19.189-.945 1.134-6.71 1.04-4.914-.095 1.795-.284 5.008.472 5.291.756.284 1.512.756 2.834-1.417 1.323-2.173 1.89-6.804 1.512-4.441-.378 2.362-1.7 5.291-.567 5.858 1.134.567 2.174-.283 2.646-2.362.473-2.079.945-7.181.662-3.874-.284 3.307-.756 5.953.472 6.33 1.229.379 1.701.095 1.701-1.794 0-1.89-.661-4.158.095-4.064.756.095 2.55.756 2.55.756"
          fill="none"
          stroke="#70F1D8"
          strokeWidth={0.265}
        /> */}
        <path
          ref={pathRef}
          fill="none"
          stroke="#70F1D8"
          strokeWidth={0.265}
          d="M12.141 171.912C5.326 169.03 0 164.916 0 162.54c0-1.064.602-4.877 1.338-8.475l1.337-6.542 2.346 7.171c6.123 18.72 27.732 23.486 36.083 7.958 2.544-4.73 3.62-9.1 3.607-14.647-.034-13.616-2.125-16.248-18.73-23.58-6.172-2.726-12.808-6.48-14.746-8.344-3.705-3.562-7.404-14.369-7.396-21.605.008-7.587 5.042-19.913 9.567-23.429 5.727-4.45 8.69-4.25 4.199.283-4.063 4.1-6.103 10.266-6.103 18.45 0 11.184 3.652 15.774 17.335 21.786 15.971 7.018 19.442 9.921 21.74 18.185 4.403 15.832.8 32.071-8.941 40.297-5.718 4.829-20.312 5.752-29.495 1.865zm44.091 1.561c0-.594 1.339-3.568 2.974-6.61 1.636-3.04 6.038-14.85 9.783-26.245l6.809-20.717h21.47l-4.701-16.633c-2.586-9.149-5.135-16.634-5.666-16.634-.53 0-1.684 3.231-2.564 7.18-.88 3.949-2.117 7.774-2.75 8.501-.632.727.986-6.704 3.597-16.513l4.746-17.835 12.63 44.383c6.948 24.41 14.346 48.392 16.44 53.292l3.81 8.911h-16.671l.725-6.74c.516-4.805-.645-12.312-4.044-26.139l-4.77-19.397H75.964l-4.753 17.86c-5.332 20.034-5.667 23.85-2.638 30.07 2.025 4.162 1.808 4.346-5.113 4.346-3.974 0-7.227-.486-7.227-1.08zm72.754-5.18c2.444-5.778 2.649-9.387 2.649-46.743 0-34.334-.321-41.142-2.115-44.827-2.04-4.192-1.409-4.346 17.933-4.346 21.281 0 26.435 1.974 32.41 12.409 7.596 13.27.108 34.869-12.208 35.21l-3.431.095 3.834 3.758c6.578 6.448 9.646 13.26 14.544 32.289l4.74 18.415h-10.425l-3.471-16.587c-1.909-9.123-3.47-17.477-3.47-18.565 0-1.088-1.761-5.113-3.913-8.946-3.545-6.315-4.876-7.049-14.214-7.837-12.178-1.029-12.499-.509-12.527 20.296-.02 15.25 1.598 26.679 4.214 29.772.835.987-2.693 1.81-7.84 1.83l-9.359.037zm41.741-58.623c1.695-3.667 3.082-9.351 3.082-12.631 0-16.166-6.305-22.285-22.963-22.285h-11.543v43.191l14.171-.804c13.705-.778 14.273-1.024 17.253-7.471zm22.252 63.94c0-.52 1.43-3.995 3.179-7.723 1.748-3.729 5.917-14.962 9.265-24.963 6.609-19.74 9.817-28.675 8.616-23.993-.577 2.248 1.758 2.97 9.612 2.97h10.374l-4.836-16.442c-2.66-9.043-5.29-15.921-5.844-15.284-.555.637-2.162 5.363-3.572 10.502-1.41 5.138-2.846 9.343-3.19 9.343-.51 0 9.138-37.56 10.245-39.887.178-.374 5.719 18.839 12.312 42.696 6.594 23.857 13.854 47.955 16.134 53.55l4.145 10.174h-8.323c-8.266 0-8.318-.041-7.512-6.012.57-4.219-.626-12.012-4.012-26.137l-4.823-20.127H212.552l-4.674 18.521c-5.298 20.991-5.504 23.36-2.56 29.41 2.026 4.16 1.809 4.345-5.112 4.345-3.975 0-7.227-.425-7.227-.944zm72.253-6.348c1.684-6.056 1.96-14.712 1.63-51.091l-.397-43.8 4.614.004 4.615.004-.636 22.573-.635 22.574h38.864l-.407-22.58-.407-22.58 3.514.006c1.933.004 3.892.273 4.352.6.46.326.73 20.375.599 44.553-.19 34.817.152 45.318 1.643 50.494l1.881 6.534h-15.329l1.99-5.281c1.433-3.806 1.989-11.107 1.989-26.138v-20.857h-18.394c-15.595 0-18.513.572-19.17 3.759-1.45 7.027-.784 32.004 1.076 40.277l1.851 8.24h-15.271ZM46.35 83.514c-1.69-6.893-8.842-13.474-17.501-16.102-6.345-1.926-6.314-1.946 1.496-.916 13.002 1.716 19.5 5.556 19.478 11.51-.034 8.849-1.921 11.841-3.473 5.508z"
          transform="translate(-18.539 -130.892)"
        />
      </svg>
      {/* <svg
        width={66.33}
        height={65.139}
        viewBox="0 0 17.55 17.235"
        xmlSpace="preserve"
        xmlns="http://www.w3.org/2000/svg"
        className={inView ? "animated visible" : "animated"}
        {...props}
      >
        <path
          style={{
            fill: "none",
            fillOpacity: 1,
            stroke: "#0e0e72",
            strokeWidth: 0.565,
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeDasharray: "none",
            strokeOpacity: 1,
            paintOrder: "markers fill stroke",
          }}
          d="m29.264 132.515-2.398.033-1.632.716-1.725 1.043-1.351 2.303-.228 1.014 1.18 1.57.342.147.79.395 3.074-.442 1.783-.369 2.263-1.24 3.057-2.847 1.387-2.391-1.114-1.272-.901.97-1.798 1.664-.862 1.197-1.318 2.424-.18 2.306-1.096 3.378-2.21 3.093-3.549 1.637-3.85-1.426-.107-1.822.886-2.246 1.308-.115.971.156.546 1.595.128-.432"
          transform="translate(-18.539 -130.892)"
        />
      </svg> */}
    </Wrapper>
  );
};

const Wrapper = styled.div`
  .animated {
    max-width: 600px;
    width: 100%;
    height: 100%;
    stroke-dasharray: ${(props) => props.pathLength};
    stroke-dashoffset: ${(props) => props.pathLength};
  }
  .animated.visible {
    animation: draw 6s linear forwards;
  }
  @keyframes draw {
    from {
      stroke-dashoffset: ${(props) => props.pathLength};
    }
    to {
      stroke-dashoffset: 0;
    }
  }
`;

export default Sarah;
